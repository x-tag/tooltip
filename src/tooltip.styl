@import 'mixins'
@import 'params'

// generate a selector for an element without any of the given values in the
// specified attribute
attrValNotInList($attrName, $invalidList){
    $finalSelector = null;

    for $invalidVal in $invalidList{
        $finalSelector = '%s:not([%s=%s])' % ($finalSelector $attrName $invalidVal)
    }

    return $finalSelector;
}

$orientTopStartLoc{
    transformed(translate3d(0, 10px, 1px));
}

$orientBottomStartLoc{
    transformed(translate3d(0, -10px, 1px));
}

$orientLeftStartLoc{
    transformed(translate3d(10px, 0, 1px));
}

$orientRightStartLoc{
    transformed(translate3d(-10px, 0, 1px));
}

// responsible for positioning;
x-tooltip{
    animated(visibility transform opacity, 0.2s);
    @extend $borderBox;
    position: absolute;
    margin: 0;
    padding: 0;
    left: 0px;
    top: 0px;

    display: block; // needed to favor horizontal tooltips,
                    // use inline-block to favor vertical

    z-index: 2147483647;
    overflow: visible;

    &[_target-fixed]{
        position: fixed;
    }

    &[ignore-tooltip-pointer-events]{
        pointer-events: none;
    }

    &:not([allow-overflow]){
        max-width: 100%;
        max-height: 100%;
    }

    &[orientation=top]{
        @extend $orientTopStartLoc;
    }

    &[orientation=bottom]{
        @extend $orientBottomStartLoc;
    }

    &[orientation=left]{
        @extend $orientLeftStartLoc;
    }

    &[orientation=right]{
        @extend $orientRightStartLoc;
    }

    &:not([visible]){
        visibility: hidden!important;
        opacity: 0!important;
        // while the tooltip is not displayed, prevent it from stretching the
        // scrollWidth/Height of the containing element
        // however, if _force-display is set on a hidden tooltip, ignore
        // constraints (this allows measurement of metrics)
        &:not([_force-display]){
            // can't use width/height:0px due to sometimes causing jump upon
            // dimension recalculation in Webkit
            width: 1px!important;
            height: 1px!important;
            left: 0px!important;
            top: 0px!important;
            margin: 0!important;
            border-width: 0px!important;

            & > *{
                display: none!important;
            }
        }
    }

    &[visible]{
        visibility: visible;
        opacity: 1;
        transformed(translate3d(0,0,1px));
    }

    // hackery to have auto orientation have the same transform animations
    $autoOrientationSelector = attrValNotInList(orientation, top bottom left right);
    &{$autoOrientationSelector}{
        $defaultAutoOrient = attrValNotInList(_auto-orientation, bottom left right);
        &[_auto-orientation=top]{
            @extend $orientTopStartLoc;
        }

        &[_auto-orientation=bottom]{
            @extend $orientBottomStartLoc;
        }

        &[_auto-orientation=left]{
            @extend $orientLeftStartLoc;
        }

        &[_auto-orientation=right]{
            @extend $orientRightStartLoc;
        }

        &[visible]{
            transformed(translate3d(0,0,1px));
        }
    }
}

// let user style this to style the balloon
x-tooltip > .tooltip-content{
    @extend $borderBox;
    position: relative;
    display: block;
    overflow: auto;
    max-width: inherit;
    max-height: inherit;

    z-index: 2;
}

x-tooltip[allow-overflow]{
    white-space: nowrap;
}

x-tooltip > .tooltip-arrow{
    @extend $borderBox;
    position: absolute;
    display: block;

    margin: 0px;
    padding: 0px;

    vertical-align: top;

    // override arrow size by modifying these together;
    // may also need to mess with transforms to line things up
    // (remember to preserve the rotate(45deg) !
    width: 1em;
    height: 1em;

    // default: shares these properties with the tooltip itself
    // can be overridden directly by using .tooltip-arrow class as well
    border: inherit;
    background: inherit;

    z-index: 1;

    // default to pointing down
    &{attrValNotInList(arrow-direction, up left right)}{
        top: 100%; // default positions to be overridden later
        left: 50%;

        transformed(translateY(-50%) rotate(45deg));
        border-top-color: transparent !important;
        border-left-color: transparent !important;
    }

    &[arrow-direction=up]{
        bottom: 100%;
        left: 50%;

        transformed(translateY(50%) rotate(45deg));
        border-bottom-color: transparent !important;
        border-right-color: transparent !important;
    }

    &[arrow-direction=left]{
        right: 100%;
        top: 50%;

        transformed(translateX(50%) rotate(45deg));
        border-top-color: transparent !important;
        border-right-color: transparent !important;
    }

    &[arrow-direction=right]{
        left: 100%;
        top: 50%;

        transformed(translateX(-50%) rotate(45deg));
        border-bottom-color: transparent !important;
        border-left-color: transparent !important;
    }
}

x-tooltip {
    border: 1px solid #808080;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 1px 1px 3px #808080;
}

